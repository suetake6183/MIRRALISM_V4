# MIRRALISM_V4 - 人間関係分析システム開発ルール

## 基本方針
- **日本語優先**: すべてのコメント、エラーメッセージ、ドキュメントは日本語で記述
- **非エンジニア向け**: エラーは分かりやすい日本語で表示
- **段階的実装**: 1日1機能の原則を守る
- **Task Master AI連携**: 作業前に必ずTask Master AIで次のタスクを確認

## コーディング規則
### 命名規則
- 変数名・関数名: ローワーキャメルケース（例：`analyzeContent`）
- ファイル名: ケバブケース（例：`analyze-content.js`）
- データベーステーブル: スネークケース（例：`user_profiles`）

### コメント規則
```javascript
// ✅ 良い例：機能の目的を日本語で説明
/**
 * 会議内容から人間関係を分析する
 * @param {string} content - 会議の議事録テキスト
 * @returns {Object} 分析結果オブジェクト
 */
function analyzeMeetingContent(content) {
    // 発言パターンを抽出
    const speakingPatterns = extractSpeakingPatterns(content);
    return speakingPatterns;
}
```

### エラーハンドリング
```javascript
// ✅ 日本語でのエラーメッセージ
try {
    await processFile(filePath);
} catch (error) {
    console.error('❌ ファイル処理中にエラーが発生しました:', error.message);
    throw new Error(`ファイル「${filePath}」の処理に失敗しました。`);
}
```

## Task Master AI 活用ルール
### 作業開始前の必須チェック
1. **次のタスク確認**: Task Master AIの`next_task`で優先タスクを特定
2. **詳細確認**: `get_task`で実装要件とテスト戦略を確認
3. **依存関係確認**: 前提タスクが完了していることを確認

### 実装中のログ記録
```javascript
// 実装中の気づきはTask Master AIに記録
// update_subtask機能を使用して進捗を詳細に記録
```

### 完了時の処理
1. **テスト実行**: タスクの`testStrategy`に従って検証
2. **ステータス更新**: `set_task_status`で'done'に変更
3. **次タスク確認**: 依存関係のあるタスクが解放されたか確認

## 技術スタック固有ルール
### Node.js
- ES6+の機能を積極的に使用
- async/awaitを優先（Promiseチェーンより読みやすい）
- エラーハンドリングは必須

### SQLite
- データベース操作は必ずトランザクション内で実行
- 日本語データの文字化け防止（UTF-8設定確認）

### ファイル操作
- 改行コードはLF（\n）で統一
- ファイル終端は必ずLFで終了
- 空白行は改行文字のみ（スペース禁止）

## 設計書準拠ルール
- **APIは使わない**: Claude Code内で直接分析を実行
- **提案→承認→学習**: この3段階ワークフローを必ず実装
- **JST時刻**: すべてのタイムスタンプは日本標準時で記録

## 品質保証
### コードレビューポイント
- [ ] 日本語コメントが適切に記述されている
- [ ] エラーメッセージが日本語で分かりやすい
- [ ] Task Master AIの要件を満たしている
- [ ] 設計書の制約を遵守している
- [ ] テスト戦略に従って検証済み

### パフォーマンス
- ファイル処理は非同期で実行
- データベースクエリは最適化済み
- メモリリークの防止

## 継続的改善
- 実装完了後はこのルールファイルを見直し
- 新しいパターンや課題があれば追加
- Task Master AIとの連携方法を継続的に改善 