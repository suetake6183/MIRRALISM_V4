# MIRRALISM_V4 プロジェクトコアルール

## プロジェクト概要
人間関係分析システム - 末武さんの議事録・思考メモをAIが自律的に分析

# MIRRALISM_V4 プロジェクト核心ルール

## **プロジェクト概要**
- **目的**: 末武さんの議事録・思考メモをClaude Codeが自律分析し、人間関係の洞察を提供
- **技術スタック**: Node.js + SQLite + Claude Code連携
- **設計書**: integrated-design-package.md準拠

## **重要な制約（必須遵守）**
- **APIは使わない**（Claude Code内で直接分析）
- **非エンジニア向け**（エラーは日本語、操作は簡単）
- **段階的実装**（1日1機能）
- **JST時刻**（すべてのタイムスタンプは日本標準時）

## **Task Master AI 統合**
- **進捗管理**: Task Master AIが全ての作業管理を担当
- **CLAUDE.md**: 概要把握のみ（詳細はTask Master AI参照）
- **作業前確認**: 必ず`next_task`で優先タスクを確認
- **実装ログ**: `update_subtask`で進捗を詳細記録

## **開発ワークフロー**
1. Task Master AIで次のタスク確認
2. 実装要件とテスト戦略を確認
3. 実装中の気づきを記録
4. テスト実行後ステータス更新

## **品質基準**
- **日本語優先**: コメント・エラーメッセージは日本語
- **設計書準拠**: 提案→承認→学習のワークフロー実装
- **パフォーマンス**: 非同期処理とデータベース最適化

## 実装前チェックリスト
1. Claude Code動作確認: `ps aux | grep -i claude`
2. 設計書の該当箇所を確認
3. 既存の学習データベースとの整合性確認
4. JST（日本標準時）でのタイムスタンプ使用

## コーディング規約
- エラーメッセージは日本語
- 関数名は英語、コメントは日本語
- JST対応のタイムスタンプ関数を使用: `getJSTTimestamp()`
- データベース操作時は `getJSTForDB()` を使用

## 禁止事項
- 外部API呼び出し
- 設計書にない機能の追加
- UTC時刻の使用（JSTに統一）
- 英語エラーメッセージ
