---
description: 
globs: 
alwaysApply: false
---
# MIRRALISM_V4 プロジェクトコアルール

## プロジェクト概要
人間関係分析システム - 末武さんの議事録・思考メモをAIが自律的に分析

# MIRRALISM_V4 プロジェクトコアルール

## プロジェクト概要
人間関係分析システム - 末武さんの議事録・思考メモをAIが自律的に分析

# MIRRALISM_V4 プロジェクト核心ルール

## **プロジェクト概要**
- **目的**: 末武さんの議事録・思考メモをClaude Codeが自律分析し、人間関係の洞察を提供
- **技術スタック**: Node.js + SQLite + Claude Code連携
- **設計書**: integrated-design-package.md準拠

## **重要な制約（必須遵守）**
- **APIは使わない**（Claude Code内で直接分析）
- **非エンジニア向け**（エラーは日本語、操作は簡単）
- **段階的実装**（1日1機能）
- **JST時刻**（すべてのタイムスタンプは日本標準時）

## **Task Master AI 統合**
- **進捗管理**: Task Master AIが全ての作業管理を担当
- **CLAUDE.md**: 概要把握のみ（詳細はTask Master AI参照）
- **作業前確認**: 必ず`next_task`で優先タスクを確認
- **実装ログ**: `update_subtask`で進捗を詳細記録

## **開発ワークフロー**
1. Task Master AIで次のタスク確認
2. 実装要件とテスト戦略を確認
3. 実装中の気づきを記録
4. テスト実行後ステータス更新

## **品質基準**
- **日本語優先**: コメント・エラーメッセージは日本語
- **設計書準拠**: 提案→承認→学習のワークフロー実装
- **パフォーマンス**: 非同期処理とデータベース最適化

## 実装前チェックリスト
1. Claude Code動作確認: `ps aux | grep -i claude`
2. 設計書の該当箇所を確認
3. 既存の学習データベースとの整合性確認
4. JST（日本標準時）でのタイムスタンプ使用

## コーディング規約
- エラーメッセージは日本語
- 関数名は英語、コメントは日本語
- JST対応のタイムスタンプ関数を使用: `getJSTTimestamp()`
- データベース操作時は `getJSTForDB()` を使用

## **重複ファイル防止ルール（必須）**
**すべてのファイル作成前の必須チェック**:

### **検索手法（必須実行順）**:
1. **セマンティック検索**: `codebase_search`で機能・目的を検索
2. **ファイル名検索**: `file_search`で関連ファイル名をファジー検索
3. **正確なパターン検索**: `grep_search`で関数名・クラス名・キーワードを検索
4. **ディレクトリ確認**: `list_dir`で関連ディレクトリの構造を確認

### **検索キーワードテンプレート**:
**機能ベース**:
- "〇〇機能 + JavaScript/Python"
- "〇〇処理 + function/class"
- "〇〇管理 + module/component"

**技術要素ベース**:
- "SQLite + 操作/query/database"
- "JSON + 書き込み/読み込み/parse"
- "ファイル + 保存/読み取り/管理"

**MIRRALISM_V4固有**:
- "分析 + 結果/データ/処理"
- "学習 + データ/情報/パターン"
- "Claude + 分析/結果/保存"
- "タイムスタンプ + JST/時刻/日時"

### **複雑度判断基準**:
**既存コードが以下を超える場合は新ファイル作成を検討**:
- **行数**: 300行超
- **関数数**: 10個超
- **サイクロマティック複雑度**: 15超
- **認知的複雑度**: 20超
- **依存関係**: 5ファイル超

### **検索結果の評価基準**:
- **完全一致（90%以上）**: 既存ファイルを修正・拡張
- **部分一致（50-90%）**: 共通モジュール化を検討
- **類似機能（30-50%）**: 設計パターンを統一
- **新機能（30%未満）**: 新ファイル作成OK

### **例外ケース**:
- 設計上明確に分離が必要（セキュリティ境界等）
- 既存コードの複雑度が判断基準を超過
- パフォーマンス・メモリ要件が異なる
- 異なるライフサイクル・更新頻度

## 禁止事項
- 外部API呼び出し
- 設計書にない機能の追加
- UTC時刻の使用（JSTに統一）
- 英語エラーメッセージ
- **検索なしでのJavaScript・Pythonファイル新規作成**

## **大規模ファイル管理ルール（スケーラビリティ対応）**
**100件以上のファイル管理における必須原則**:

### **階層化ディレクトリ構造**:
**時系列ベース階層**:
```
output/analysis_results/
├── 2025/
│   ├── 01-January/
│   ├── 02-February/
│   └── 03-March/
├── 2024/
│   └── 12-December/
└── archived/
    ├── pre-2024/
    └── deprecated/
```

**機能別階層**:
```
output/analysis_results/
├── meeting-analysis/
│   ├── 2025-Q1/
│   └── 2024-Q4/
├── personal-profiles/
│   ├── active/
│   └── inactive/
├── learning-data/
│   ├── patterns/
│   └── corrections/
└── system-reports/
    ├── daily/
    └── monthly/
```

### **ファイル命名規則（統一）**:
**基本パターン**: `{type}_{source}_{date}_{version}.{ext}`
- type: analysis, profile, learning, report
- source: 元ファイル名（短縮形）
- date: YYYYMMDD形式
- version: v1, v2, final等

**例**:
- `analysis_shimoju_20250617_v2.json`
- `profile_suetake_20250617_final.json`
- `learning_pattern_20250617_v1.json`

### **メタデータ管理**:
**インデックスファイル**: `_index.json`（各ディレクトリに配置）
```json
{
  "directory": "2025/01-January",
  "fileCount": 15,
  "lastUpdated": "2025-01-17T10:30:00+09:00",
  "files": [
    {
      "filename": "analysis_shimoju_20250117_v1.json",
      "size": "89KB",
      "type": "meeting-analysis",
      "source": "社労士_下重さん.txt",
      "tags": ["社労士", "SKコーム", "年度更新"]
    }
  ]
}
```

### **自動化ルール**:
**月次アーカイブ**: 3ヶ月経過したファイルを自動アーカイブ
**容量監視**: ディレクトリサイズが100MBを超えたら警告
**重複検出**: 同一内容ファイルの自動検出・統合提案
**検索インデックス**: メタデータ自動更新・検索性向上

### **検索性向上策**:
**タグシステム**: 分析対象、業種、重要度でタグ付け
**全文検索**: ファイル内容のインデックス化
**関連ファイル**: 同一人物・プロジェクトの関連ファイル表示
**使用頻度**: アクセス頻度に基づく優先表示

### **実装優先度**:
1. **即座実装**: 階層化ディレクトリ構造
2. **短期実装**: 統一命名規則とメタデータ管理
3. **中期実装**: 自動化ルールとインデックス
4. **長期実装**: 高度な検索・関連性機能
